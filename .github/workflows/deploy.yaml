name: Deploy to Kubernetes

on:
  push:
    branches: [ "main" ]

jobs:
  # === JOB 1: BUILD IMAGE ===
  build:
    runs-on: ubuntu-latest
    outputs:
      # 'outputs' cho phép chúng ta gửi thông tin từ job này sang job khác
      # Chúng ta sẽ gửi đi image tag duy nhất đã được build
      image_tag: ${{ steps.build_and_push_image.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # === BƯỚC MỚI ĐỂ CACHE NPM PACKAGES ===
    - name: Cache npm dependencies
      id: cache-npm
      uses: actions/cache@v4
      with:
        # Đường dẫn đến thư mục cache của npm
        path: ~/.npm
        # Key để định danh cache. Nó sẽ thay đổi nếu file package-lock.json thay đổi
        key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
        # Khôi phục cache ngay cả khi key không khớp hoàn toàn
        restore-keys: |
          ${{ runner.os }}-npm-

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      # Đặt một 'id' cho bước này để có thể tham chiếu đến 'outputs' của nó
      id: build_and_push_image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        # Tag image bằng username và một mã hash duy nhất (digest)
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/my-backend-app:latest
        # Thêm 'cache-from' và 'cache-to' để tối ưu cả quá trình build image
        cache-from: type=gha
        cache-to: type=gha,mode=max


  # === JOB 2: DEPLOY IMAGE ===
  deploy:
    runs-on: ubuntu-latest
    # 'needs: build' đảm bảo job này chỉ chạy KHI VÀ CHỈ KHI job 'build' thành công
    needs: build

    steps:
    # === BƯỚC MỚI ĐỂ TỐI ƯU ===
    - name: Optimize Dpkg (Skip Docs and Man Pages)
      run: |
        echo "path-exclude /usr/share/doc/*" | sudo tee /etc/dpkg/dpkg.cfg.d/01_nodoc
        echo "path-exclude /usr/share/man/*" | sudo tee -a /etc/dpkg/dpkg.cfg.d/01_nodoc
        
    # Bước được tối ưu hóa bằng cache
    - name: Cache cloudflared deb package
      id: cache-cloudflared
      uses: actions/cache@v4
      with:
        path: cloudflared.deb
        key: ${{ runner.os }}-cloudflared-latest
        
    - name: Install cloudflared
      run: |
        if [[ "${{ steps.cache-cloudflared.outputs.cache-hit }}" != 'true' ]]; then
          echo "Cache miss. Downloading cloudflared..."
          curl -L --output cloudflared.deb https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
        else
          echo "Cache hit. Using cached cloudflared."
        fi
        sudo dpkg -i cloudflared.deb

    - name: Create cloudflared certificate
      run: |
        mkdir -p ~/.cloudflared/
        echo "${{ secrets.CLOUDFLARE_CERT }}" > ~/.cloudflared/cert.pem
        
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.K8S_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        echo "Host ${{ secrets.K8S_HOST }}" > ~/.ssh/config
        echo "  ProxyCommand /usr/local/bin/cloudflared access ssh --hostname %h" >> ~/.ssh/config
        echo "  User ${{ secrets.K8S_USER }}" >> ~/.ssh/config
        echo "  IdentityFile ~/.ssh/id_rsa" >> ~/.ssh/config
        echo "  StrictHostKeyChecking no" >> ~/.ssh/config
        echo "  UserKnownHostsFile /dev/null" >> ~/.ssh/config

    - name: Deploy to Kubernetes
      run: |
        ssh ${{ secrets.K8S_HOST }} << 'ENDSSH'
          # Lệnh dưới đây sẽ được chạy trên server của bạn
          echo "--- Connected to server, starting deployment ---"
          cd ~/github/k8s-demo
          echo "--- Updating image tag in deployment YAML ---"
          # Sử dụng image tag nhận được từ job 'build'
          sed -i 's|image: .*|image: ${{ secrets.DOCKERHUB_USERNAME }}/my-backend-app@${{ needs.build.outputs.image_tag }}|g' hello-app.yaml
          echo "--- Applying new configuration to Kubernetes ---"
          kubectl apply -f hello-app.yaml
          echo "--- Deployment successful! ---"
        ENDSSH